using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Fallout4;

namespace FOLIP
{
    public class Program
    {
        static Lazy<LodSettings> _lazySettings = null!;
        static LodSettings Settings => _lazySettings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _lazySettings)
                .SetTypicalOpen(GameRelease.Fallout4, "FOLIP-Dynamic.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            Console.WriteLine("FOLIP START");

            List<string> lodMaterialFiles = new List<string>();

            string[] lodMaterialFileLocations = { $"{state.DataFolderPath}\\materials\\lod", $"{state.DataFolderPath}\\materials\\dlc03\\lod", $"{state.DataFolderPath}\\materials\\dlc04\\lod" };
            string[] patternReplaceList = { "", "dlc03\\", "dlc04\\" };

            lodMaterialFiles = GameAssets.Files(lodMaterialFileLocations, "*.bgsm", patternReplaceList);

            List<string> missingMaterials = new List<string>();

            foreach (var materialSwap in state.LoadOrder.PriorityOrder.MaterialSwap().WinningOverrides())
            {
                List<string> lodSubstitutionsOriginal = new List<string>();
                List<string> lodSubstitutionsReplacement = new List<string>();
                int n = -1;
                foreach (var substitution in materialSwap.Substitutions)
                {
                    var theOriginalMaterial = substitution.OriginalMaterial;
                    if (theOriginalMaterial is null) continue;
                    theOriginalMaterial = theOriginalMaterial.ToLower();

                    //If the original material does not have a direct lod material, continue.
                    if (!lodMaterialFiles.Contains(theOriginalMaterial)) continue;
                    var theReplacementMaterial = substitution.ReplacementMaterial;
                    if (theReplacementMaterial is null) continue;
                    theReplacementMaterial = theReplacementMaterial.ToLower();

                    //I used this code to find a specific problematic material swap, where the swap file didn't exist.
                    //if (theReplacementMaterial == "landscape\\ground\\grassdried01.bgsm")
                    //    Console.WriteLine(materialSwap.FormKey);

                    //If the replacement material does not have a direct lod material, continue.
                    if (!lodMaterialFiles.Contains(theReplacementMaterial))
                    {
                        if (!missingMaterials.Contains(theReplacementMaterial))
                            missingMaterials.Add($"{theReplacementMaterial} RM\n\tfrom {theOriginalMaterial} OM.");
                        continue;
                    }
                    if (substitution.ColorRemappingIndex is not null)
                    {
                        if (Settings.verboseConsoleLog) Console.WriteLine($"Note for LOD author: {materialSwap.FormKey} has a Color Remapping Index of {substitution.ColorRemappingIndex}. Please manually check this material swap for proper handling.");
                        continue;
                    }
                    //If the original material and replacement material both have direct lod materials, add them to the lists.
                    n += 1;

                    switch (theOriginalMaterial.Substring(0, 6))
                    {
                        case "dlc04\\":
                            theOriginalMaterial = theOriginalMaterial.Replace("dlc04\\", "DLC04\\LOD\\");
                            break;
                        case "dlc03\\":
                            theOriginalMaterial = theOriginalMaterial.Replace("dlc03\\", "DLC03\\LOD\\");
                            break;
                        default:
                            theOriginalMaterial = $"LOD\\{theOriginalMaterial}";
                            break;
                    }
                    lodSubstitutionsOriginal.Add(theOriginalMaterial);
                    switch (theReplacementMaterial.Substring(0, 6))
                    {
                        case "dlc04\\":
                            theReplacementMaterial = theReplacementMaterial.Replace("dlc04\\", "DLC04\\LOD\\");
                            break;
                        case "dlc03\\":
                            theReplacementMaterial = theReplacementMaterial.Replace("dlc03\\", "DLC03\\LOD\\");
                            break;
                        default:
                            theReplacementMaterial = $"LOD\\{theReplacementMaterial}";
                            break;
                    }
                    lodSubstitutionsReplacement.Add(theReplacementMaterial);
                }
                if (n < 0) continue;
                var myFavoriteMaterialSwap = state.PatchMod.MaterialSwaps.GetOrAddAsOverride(materialSwap);
                while (n >= 0)
                {
                    myFavoriteMaterialSwap.Substitutions.Add(new MaterialSubstitution
                    {
                        OriginalMaterial = $"{lodSubstitutionsOriginal[n]}",
                        ReplacementMaterial = $"{lodSubstitutionsReplacement[n]}"
                    });
                    n--;
                }
            }
            missingMaterials = missingMaterials.OrderBy(q => q).ToList();
            foreach (string missingMaterial in missingMaterials)
            {
                if (Settings.verboseConsoleLog) Console.WriteLine($"Note for LOD author: Skipped\t{missingMaterial}");
            }
        }
    }
}
